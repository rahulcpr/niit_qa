<?php

/**
 * @file
 * Module hooks.
 */

use Drupal\adv_varnish\Form\CacheBlockForm;
use Drupal\adv_varnish\RequestHandler;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\node\NodeTypeInterface;

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function adv_varnish_form_node_type_form_alter(&$form, FormStateInterface $form_state) {
  // Load the current node type configuration entity.
  $node_type = $form_state->getFormObject()->getEntity();

  // Cache time for Varnish.
  $period = [
    0,
    60,
    180,
    300,
    600,
    900,
    1800,
    2700,
    3600,
    10800,
    21600,
    32400,
    43200,
    86400,
  ];
  $period = array_map([\Drupal::service('date.formatter'), 'formatInterval'], array_combine($period, $period));
  $period[0] = t('No caching');

  $form['adv_varnish'] = [
    '#type' => 'details',
    '#title' => t('Advanced Varnish cache'),
    '#group' => 'additional_settings',
    '#tree' => TRUE,
  ];
  $form['adv_varnish']['override'] = [
    '#type' => 'checkbox',
    '#title' => t('Override default page cache maximum age value.'),
    '#default_value' => $node_type->getThirdPartySetting('adv_varnish', 'override'),
  ];
  $form['adv_varnish']['ttl'] = [
    '#type' => 'select',
    '#title' => t('TTL'),
    '#default_value' => $node_type->getThirdPartySetting('adv_varnish', 'ttl'),
    '#options' => $period,
    '#description' => t('The maximum time a page can be cached by varnish.'),
    '#states' => [
      'visible' => [
        ':input[name="adv_varnish[override]"]' => ['checked' => TRUE],
      ],
    ],
  ];

  $form['#entity_builders'][] = 'adv_varnish_form_node_type_form_builder';
}

/**
 * Entity form builder for the node type form.
 *
 * Map the configuration to third party settings.
 */
function adv_varnish_form_node_type_form_builder($entity_type, NodeTypeInterface $type, &$form, FormStateInterface $form_state) {
  if ($form_state->getValue(['adv_varnish', 'override'])) {
    $type->setThirdPartySetting('adv_varnish', 'override', $form_state->getValue(['adv_varnish', 'override']));
    $type->setThirdPartySetting('adv_varnish', 'ttl', $form_state->getValue(['adv_varnish', 'ttl']));
    return;
  }

  $type->unsetThirdPartySetting('adv_varnish', 'override');
  $type->unsetThirdPartySetting('adv_varnish', 'ttl');
}

/**
 * Implements hook_entity_type_alter().
 */
function adv_varnish_entity_type_alter(array &$entity_types) {
  if (!empty($entity_types['block'])) {
    $entity_types['block']->setFormClass('default', CacheBlockForm::class);
  }
}

/**
 * Implements hook_theme().
 */
function adv_varnish_theme() {
  return [
    'adv_varnish_esi_block' => [
      'variables' => [
        '_html' => [],
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_page().
 */
function adv_varnish_preprocess_page(&$variables) {
  $cache_manager = \Drupal::service('adv_vanish.cache_manager');

  // If cache is disabled we do nothing here.
  if (!$cache_manager->cachingEnabled()) {
    return;
  }

  $account = \Drupal::currentUser();
  $content = &$variables['page']['content'];
  $attached = &$variables['#attached'];

  $authenticated = $account->isAuthenticated();

  // Only adds user blocks if we have an actual user.
  if ($authenticated) {
    $esi_tag = adv_varnish_esi_tag(RequestHandler::ESI_TYPE_USER_BLOCKS, '1');
    $content['adv_varnish_user_blocks']['#theme'] = 'adv_varnish_esi_block';
    $content['adv_varnish_user_blocks']['#_html']['tag'] = $esi_tag;
    $content['adv_varnish_user_blocks']['#weight'] = 99999;
    $attached['library'][] = 'adv_varnish/adv_varnish_user_data';
  }
}

/**
 * Generate ESI tag.
 *
 * @param string $esi_type
 *   Type of ESI data to be provided.
 * @param string $esi_id
 *   ID of data will be used during request to Drupal.
 * @param int $cache_mode
 *   Caching mode can be RequestHandler::CACHE_PER_USER
 *   RequestHandler::CACHE_PER_ROLE RequestHandler::CACHE_PER_PAGE.
 * @param array $esi_args
 *   Additional arguments used to build ESI tag.
 * @param int $max_wait
 *   Timeout will be used in Varnish when data will be retrieved from Drupal.
 *
 * @return string
 *   Generated ESI tag.
 */
function adv_varnish_esi_tag($esi_type, $esi_id, $cache_mode = RequestHandler::CACHE_PER_USER, array $esi_args = [], $max_wait = 5000) {

  // Generate ESI path.
  $path = '/adv_varnish/esi/' . $esi_type . '/' . $esi_id;

  // Build query.
  $query['cachemode'] = $cache_mode;
  if (!empty($esi_args)) {
    $query['a'] = $esi_args;
  }
  $url = Url::fromUserInput($path, ['query' => $query]);

  // Build tag.
  $tag = "<!--esi\n" . '<esi:include src="' . $url->toString() . '" maxwait="' . $max_wait . '"/>' . "\n-->";

  return $tag;
}

/**
 * Implements hook_cron().
 */
function adv_varnish_cron() {

  // @var \Drupal\adv_varnish\CacheManagerInterface
  $varnish      = \Drupal::service('adv_vanish.cache_manager');
  $deflate_info = \Drupal::state()->get('adv_varnish_deflate_info');
  $deflate_ids  = \Drupal::state()->get('adv_varnish_deflate_ids');
  $deflate_key  = $deflate_info['key'];

  // If we have something to deflate.
  if (!empty($deflate_ids) && !empty($deflate_key)) {
    for ($i = 0; $i < $deflate_info['step']; $i++) {

      // Double check as we will reduce this array.
      if (!empty($deflate_ids)) {

        // Pick random key to deflate.
        $key = mt_rand(0, count($deflate_ids) - 1);
        $deflate_value = $deflate_ids[$key];
        $res = $varnish->deflateCache($deflate_value);

        // Sleep a bit to save from spam.
        usleep(10000);

        // Update deflate array.
        if (!empty($res)) {
          unset($deflate_ids[$key]);
          $deflate_ids = array_values($deflate_ids);
        }
      }

      \Drupal::state()->set('adv_varnish_deflate_ids', $deflate_ids);
    }

  }
}

/**
 * Implements hook_block_build_alter().
 */
function adv_varnish_block_build_alter(array &$build, BlockPluginInterface $block) {
  if (_adv_varnish_check_if_esi_block($block)) {
    // Prevent Drupal from caching ESI block.
    $build['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_block_view_alter().
 */
function adv_varnish_block_view_alter(array &$build, BlockPluginInterface $block) {
  if (_adv_varnish_check_if_esi_block($block)) {
    // If we need to replace block with ESI we
    // change #pre_render callback to handle this.
    $build['#theme'] = 'adv_varnish_esi_block';
    $build['#pre_render'] = [function($build) {
      return _adv_varnish_build_esi_block($build);
    }];
  }
}

/**
 * Check if given block needs to be replaced with ESI.
 *
 * @param \Drupal\Core\Block\BlockPluginInterface $block
 *   Block plugin.
 *
 * @return bool
 *   Returns TRUE if current block is ESI.
 */
function _adv_varnish_check_if_esi_block(BlockPluginInterface $block) {

  // If this is not an ESI block then do nothing here.
  $conf = $block->getConfiguration();
  $esi = !empty($conf['cache']['esi']) ? TRUE : FALSE;
  if (!$esi) {
    return FALSE;
  }

  // @var \Drupal\adv_varnish\CacheManagerInterface
  $cache_manager = \Drupal::service('adv_vanish.cache_manager');
  $account = \Drupal::currentUser();
  $bypass_varnish = $account->hasPermission('bypass advanced varnish cache');

  // We shouldn't replace block by ESI tag if cache is disabled
  // or block is not marked as ESI.
  if ($cache_manager->isEsiRequest()
    || $bypass_varnish
    || !$cache_manager->cachingEnabled()
    || !$cache_manager->esiEnabled()) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Replace block content with ESI tag.
 *
 * @param array $build
 *   Build array of block.
 *
 * @return array
 *   Returns build array for ESI block.
 */
function _adv_varnish_build_esi_block(array $build) {
  $id = $build['#block']->id();

  // Remove the block entity from the render array, to ensure that blocks
  // can be rendered without the block config entity.
  unset($build['#block']);

  $cache_conf = $build['#configuration']['cache'];
  $cache_mode = $cache_conf['cachemode'];

  $content = adv_varnish_esi_tag(RequestHandler::ESI_TYPE_BLOCK, $id, $cache_mode);
  $build['#_html']['tag'] = $content;

  // Set flag for varnish that we have ESI in the response.
  $build['#attached']['http_header'] = [
    [RequestHandler::HEADER_X_DOESI, TRUE],
  ];

  return $build;
}
